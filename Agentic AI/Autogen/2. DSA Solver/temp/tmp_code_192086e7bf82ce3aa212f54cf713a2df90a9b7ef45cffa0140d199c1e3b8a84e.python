class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode()
    current = dummy
    carry = 0

    while l1 or l2 or carry:
        val1 = (l1.val if l1 else 0)
        val2 = (l2.val if l2 else 0)

        # Calculate new sum and carry over
        sum_val = val1 + val2 + carry
        carry = sum_val // 10
        new_digit = sum_val % 10

        # Update the result list
        current.next = ListNode(new_digit)
        current = current.next

        # Move to the next nodes
        if l1:
            l1 = l1.next
        if l2:
            l2 = l2.next

    return dummy.next

# Test cases
def linked_list_from_list(lst):
    dummy = ListNode(0)
    current = dummy
    for number in lst:
        current.next = ListNode(number)
        current = current.next
    return dummy.next

def list_from_linked_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Test the function with the examples provided
l1 = linked_list_from_list([2, 4, 3])
l2 = linked_list_from_list([5, 6, 4])
result = addTwoNumbers(l1, l2)
print("Output for [2,4,3] + [5,6,4] :", list_from_linked_list(result))

l1 = linked_list_from_list([0])
l2 = linked_list_from_list([0])
result = addTwoNumbers(l1, l2)
print("Output for [0] + [0] :", list_from_linked_list(result))

l1 = linked_list_from_list([9, 9, 9, 9, 9, 9, 9])
l2 = linked_list_from_list([9, 9, 9, 9])
result = addTwoNumbers(l1, l2)
print("Output for [9,9,9,9,9,9,9] + [9,9,9,9] :", list_from_linked_list(result))
